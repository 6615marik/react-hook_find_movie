{"version":3,"file":"static/js/956.85a1fe41.chunk.js","mappings":"+MAsFA,UAjFsB,WAAO,IAAD,IAC1B,GAA4BA,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GAQR,IAPAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQH,GACLI,KAAKP,GACLQ,OAAM,SAAUC,GACfC,QAAQC,IAAI,UAAYF,EACzB,GACJ,GAAE,CAACN,IACW,OAAXJ,EAAJ,CACA,IAAQa,EAAkDb,EAAlDa,YAAaC,EAAqCd,EAArCc,eAAgBC,EAAqBf,EAArBe,SAAUC,EAAWhB,EAAXgB,OAC/C,OACE,+BACE,4BACE,SAAC,KAAD,CAAMC,GAAE,oBAAEf,EAASgB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,UAAlC,UACE,2CAEF,4BAUE,gBACEC,IACkB,OAAhBP,EACIQ,EADJ,0CAEuCR,GAEzCS,IAAKR,EACLS,MAAM,SAGR,4BACE,wBAAKT,KACL,0BACE,wCADF,IAC0BC,MAG1B,wCACA,wBACGC,EAAOQ,KAAI,gBAAGpB,EAAH,EAAGA,GAAIqB,EAAP,EAAOA,KAAP,OACV,wBAAcA,GAALrB,EADC,aAMlB,4BACE,mDACA,2BACE,0BACG,KACD,SAAC,KAAD,CAAMa,GAAG,OAAOC,MAAO,CAAEC,KAAMjB,EAASgB,MAAMC,MAA9C,oBAFM,SAMR,0BACG,KACD,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAMjB,EAASgB,MAAMC,MAAjD,uBAFM,kBAQZ,2BACG,KACD,SAAC,EAAAO,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,aA9DiB,CAoE5B,C,+LCpFKC,EAAW,gCACXC,EAAU,2CAGVC,EAAS,mCAAG,sGACEC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,8BAA2CC,IAD7C,cACVG,EADU,OAGVC,EAAiBD,EAAIE,KAAKC,QAAQX,KACtC,YACE,MAAO,CAAEpB,GADmC,EAA3CA,GACYgC,MAD+B,EAAvCA,MACevB,YADwB,EAAhCA,YACqBwB,aADW,EAAnBA,aAE1B,IANa,kBAQTJ,GARS,2CAAH,qDAYT1B,EAAO,mCAAG,WAAMH,GAAN,uFACO2B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BxB,EAA9B,YAAoCyB,IAD3C,cACVS,EADU,yBAGPA,EAASJ,MAHF,2CAAH,sDAOPK,EAAU,mCAAG,WAAMnC,GAAN,yFACQ2B,EAAAA,EAAAA,IAAA,UACpBH,EADoB,iBACHxB,EADG,oBACWyB,IAFnB,cACXW,EADW,OAIXC,EAAUD,EAAWN,KAAKC,QAAQX,KAAI,YAC1C,MAAO,CAAEkB,OAD8D,EAA1BA,OAC5BC,QADsD,EAAlBA,QAC3BvC,GAD6C,EAATA,GAE/D,IANgB,kBAOVqC,GAPU,2CAAH,sDAWVG,EAAQ,mCAAG,WAAMxC,GAAN,uFACQ2B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BxB,EAA9B,oBAA4CyB,IADpD,cACTgB,EADS,yBAERA,EAASX,MAFD,2CAAH,sDAMRY,EAAU,mCAAG,WAAMC,GAAN,uFACQhB,EAAAA,EAAAA,IAAA,UACpBH,EADoB,wBACIC,EADJ,4DAC+DkB,IAFvE,cACXC,EADW,yBAKVA,EAAWd,KAAKC,SALN,2CAAH,qD","sources":["page/MoviesDetails.jsx","servises.api.jsx"],"sourcesContent":["import { getById } from 'servises.api';\nimport { useEffect, useState, Suspense } from 'react';\nimport { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport pict from '../components/picture/pict.png';\n\nconst MoviesDetails = () => {\n  const [movies, setMovies] = useState(null);\n\n  const location = useLocation();\n  const { id } = useParams();\n  useEffect(() => {\n    getById(id)\n      .then(setMovies)\n      .catch(function (error) {\n        console.log('Error: ' + error);\n      });\n  }, [id]);\n  if (movies === null) return;\n  const { poster_path, original_title, overview, genres } = movies;\n  return (\n    <>\n      <div>\n        <Link to={location.state?.from ?? '/movies'}>\n          <button>Go back</button>\n        </Link>\n        <div>\n          {/* {poster_path === null ? (\n            <img src={pict} alt={original_title} width=\"240\" />\n          ) : (\n            <img\n              src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n              alt={original_title}\n              width=\"240\"\n            />\n          )} */}\n          <img\n            src={\n              poster_path === null\n                ? pict\n                : `https://image.tmdb.org/t/p/w300/${poster_path}`\n            }\n            alt={original_title}\n            width=\"240\"\n          />\n\n          <div>\n            <h2>{original_title}</h2>\n            <p>\n              <span>Overview:</span> {overview}\n            </p>\n\n            <span>Genres: </span>\n            <ul>\n              {genres.map(({ id, name }) => (\n                <li key={id}>{name}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <div>\n          <p>Additional inrormation</p>\n          <ul>\n            <li key=\"cast\">\n              {' '}\n              <Link to=\"cast\" state={{ from: location.state.from }}>\n                Cast\n              </Link>\n            </li>\n            <li key=\"reviews\">\n              {' '}\n              <Link to=\"reviews\" state={{ from: location.state.from }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n        <div>\n          {' '}\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default MoviesDetails;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'api_key=d2aad9d08af0864f29f140d50d0d9bda';\n\n// Trending movies -> HomePage\nconst getMovies = async () => {\n  const res = await axios.get(`${BASE_URL}trending/movie/day?${API_KEY}`);\n  // console.log(res.data.results);\n  const trendingMovies = res.data.results.map(\n    ({ id, title, poster_path, vote_average }) => {\n      return { id, title, poster_path, vote_average };\n    }\n  );\n  return trendingMovies;\n};\n\n// Search by id -> MovieDetailsPage\nconst getById = async id => {\n  let respById = await axios.get(`${BASE_URL}movie/${id}?${API_KEY}`);\n\n  return respById.data;\n};\n\n//Movie REVIEW by id -> Review\nconst getReviews = async id => {\n  const resReviews = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?${API_KEY}`\n  );\n  const reviews = resReviews.data.results.map(({ author, content, id }) => {\n    return { author, content, id };\n  });\n  return reviews;\n};\n\n// CAST review by id -> Cast\nconst getCasts = async id => {\n  const resCasts = await axios.get(`${BASE_URL}movie/${id}/credits?${API_KEY}`);\n  return resCasts.data;\n};\n\n// Movie by name/query -> MoviesPage\nconst getByQuery = async query => {\n  const resByQuery = await axios.get(\n    `${BASE_URL}search/movie?${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n\n  return resByQuery.data.results;\n};\n\nexport { getMovies, getById, getReviews, getCasts, getByQuery };\n"],"names":["useState","movies","setMovies","location","useLocation","id","useParams","useEffect","getById","then","catch","error","console","log","poster_path","original_title","overview","genres","to","state","from","src","pict","alt","width","map","name","Suspense","fallback","BASE_URL","API_KEY","getMovies","axios","res","trendingMovies","data","results","title","vote_average","respById","getReviews","resReviews","reviews","author","content","getCasts","resCasts","getByQuery","query","resByQuery"],"sourceRoot":""}